#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('mentutorial:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
// https://nodejs.org/api/net.html 
// Start a server listening for connections.
server.listen(port);
// 'error' is an event defined at Net module
// https://nodejs.org/api/net.html#event-error
// Event of Class: net.Server, Emitted when an error occurs.
// The onError function checks for various errors and handles them appropriately â€” it is then registered to the server.
server.on('error', onError); 

// 'listening' is an event defined at Net module
// https://nodejs.org/api/net.html
// Event of Class: net.Server,  The Built-in HTTP Module inherits from net.Server 
// Emitted when the server has been bound after calling server.listen().
// https://www.freecodecamp.org/news/build-a-secure-server-with-node-and-express/
// A listening event listener is also registered, logging the port or named pipe on which the server is running to the console.
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  // Depending on how you call this function your port may be an object, string, or number that defines the location of where the application "binds" to, in order to "listen" for requests.
  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  // https://www.reddit.com/r/node/comments/h0b1uh/can_anyone_explain_to_me_what_this_code_does/?rdt=42102
  // Logs an error message to the console when your server cannot start on account of an unforeseen error. You need not set NODE_ENV and DEBUG to see these messages, as it uses the built in console.error method and not the external debug module. 
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 * https://www.reddit.com/r/node/comments/h0b1uh/can_anyone_explain_to_me_what_this_code_does/?rdt=42102
 * When your server is running (and listening on a port), this listener merely logs a debug message to the console, , provided:
- that the server is running in DEBUG mode (that is, the NODE_ENV and DEBUG environment variables are set to dev and * respectively) and
- you have the debug NPM module imported. 
 */

function onListening() {
  var addr = server.address();
  // Depending on how you call this function your port may be an object, string, or number that defines the location of where the application "binds" to, in order to "listen" for requests.
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  // If the environment variables aren't set, you won't see the "Listening on ..." message on the console. 
  debug('Listening on ' + bind);
}
